- name: Apply Mongo database options from file
  when: (psmdb_version != "" or mongo_org_version != "") and db_opts_file != ''
  block:
    - name: Merge conf file part and main config
      command:
        cmd: /vagrant/tools/yq -i ea '. as $item ireduce ({}; . * $item )' /etc/mongod.conf "/vagrant/configs/{{ db_opts_file }}"
        creates: "/root/{{ db_opts_file | basename }}.applied"
    - name: Avoid re-merge on next runs
      file: path="/root/{{ db_opts_file | basename }}.applied" state=touch modification_time=preserve access_time=preserve

- name: setup mongos
  when: mongos_cfg != ''
  block:
    - name: create mongos config from template
      template:
        src: "{{playbook_dir}}/configs/mongo/mongos.conf.j2"
        dest: "/etc/mongos.conf"
    - name: copy keyfile
      copy:
        src: "{{playbook_dir}}/secret/{{mongos_keyfile}}"
        dest: "/etc/{{mongos_keyfile}}"
        mode: "0400"
        owner: "mongod"
        group: "mongod"
    - copy:
        src: "{{playbook_dir}}/roles/mongodb/files/mongos.{{ 'rpm' if (ansible_distribution == 'CentOS' or ansible_distribution == 'Rocky' or ansible_distribution == 'Red Hat Enterprise Linux' or ansible_distribution == 'OracleLinux') else 'deb' }}.service"
        dest: /etc/systemd/system/mongos.service
    - copy:
        src: "{{playbook_dir}}/roles/mongodb/files/etc.sysconfig.mongos"
        dest: /etc/sysconfig/mongos
      when: (ansible_distribution == 'CentOS' or ansible_distribution == 'Rocky' or ansible_distribution == 'Red Hat Enterprise Linux' or ansible_distribution == 'OracleLinux')
    - copy:
        src: "{{playbook_dir}}/roles/mongodb/files/etc.default.mongos"
        dest: /etc/default/mongos
      when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
    - systemd:
        daemon_reload: yes
    - name: Add shards to mongos
      command:
        cmd: /bin/bash /vagrant/tools/setup_mongos.sh "{{ db_user }}" "{{ db_password }}" "{{ mongos_shard }}"
        creates: /root/mongos.configured
      when: mongos_shard != ''
    - name: Set systemd service to mongos
      set_fact:
        db_systemd_service: mongos

- name: Create MongoDB database
  when: db_password != "" and (psmdb_version != "" or mongo_org_version != '' and mongos_cfg == '' )
  shell:
    cmd: >-
      systemctl start mongod;
      MONGO=/usr/bin/mongo;
      test -f $MONGO || MONGO=/usr/bin/mongosh;
      until $MONGO --eval 'print("waited for connection")' &>/dev/null ; do sleep 2 ; done;
      $MONGO admin --eval 'db.createUser({user:"dba", pwd: "{{ db_password }}", roles: ["root"]})';
      {{ 'true && ' if psmdb_version != '' else 'false &&' }} percona-server-mongodb-enable-auth.sh -q;
      $MONGO admin --eval 'db.changeUserPassword("dba", "{{ db_password }}")';
      /vagrant/tools/yq -i ea '. as $item ireduce ({}; . * $item )' /etc/mongod.conf "/vagrant/configs/mongo/authorization.conf"
      systemctl stop mongod;
      sed -i -e 's/127.0.0.1/0.0.0.0/g' /etc/mongod.conf;
      echo 'db = connect("mongodb://dba:{{ db_password }}@127.0.0.1:27017/admin")' > /root/.mongorc.js;
      echo 'db = connect("mongodb://dba:{{ db_password }}@127.0.0.1:27017/admin")' > /root/.mongoshrc.js
    creates: /root/.mongorc.js

- name: merge shardsrv conf
  when: mongo_shardsrv  != ''
  command:
    cmd: /vagrant/tools/yq -i ea '. as $item ireduce ({}; . * $item )' /etc/mongod.conf "/vagrant/configs/mongo/shardsrv.conf"
    creates: "/root/shardsrv.applied"

- name: configure MongoDB replica options
  when: db_password != '' and (psmdb_version != '' or mongo_org_version != '') and mongo_replicaset != ''
  block:
    - name: copy keyfile
      copy:
        src: "{{playbook_dir}}/secret/{{mongo_replicaset}}-keyfile"
        dest: "/etc/{{mongo_replicaset}}-keyfile"
        mode: "0400"
        owner: "mongod"
        group: "mongod"
    - name: create replication template yaml
      template:
        src: "{{playbook_dir}}/configs/mongo/replica.conf.j2"
        dest: "/root/replica-{{mongo_replicaset}}.yaml"
    - name: Merge conf file part and main config
      command:
        cmd: /vagrant/tools/yq -i ea '. as $item ireduce ({}; . * $item )' /etc/mongod.conf "/root/replica-{{mongo_replicaset}}.yaml"
        creates: "/root/replica-{{mongo_replicaset}}.applied"
    - name: Avoid re-merge on next runs
      file: path="/root/replica-{{mongo_replicaset}}.applied" state=touch modification_time=preserve access_time=preserve

- name: merge configsrv conf
  when: mongo_configsrv  != ''
  command:
    cmd: /vagrant/tools/yq -i ea '. as $item ireduce ({}; . * $item )' /etc/mongod.conf "/vagrant/configs/mongo/configsrv.conf"
    creates: "/root/configsrv.applied"

- name: Setup LDAP on client
  when: ldap_server_ip != ''
  command:
    cmd: /bin/bash /vagrant/tools/setup_ldap_client.sh "{{ldap_server_ip}}"
    creates: /root/ldap-client.configured

- name: Setup Mongo for LDAP
  when: psmdb_version != '' and db_password != '' and ldap_server_ip != ''
  shell:
    cmd: /bin/bash /vagrant/tools/setup_mongo_ldap.sh perconaro secret "{{ldap_server_ip}}" no "{{db_password}}"
    creates: /etc/sasl2/mongodb.conf

- name: MongoDB Samba Active Directory
  when: samba_ip != '' and samba_pass != '' and samba_sid != '' and psmdb_version != ''
  shell:
    cmd: /bin/bash /vagrant/tools/setup_samba_ldap_client.sh "{{samba_ip}}" "{{samba_pass}}" "{{samba_sid}}" mongo


- name: Setup Mongo for Active Directory LDAP
  when: psmdb_version != '' and db_password != '' and samba_ip != ''
  shell:
    cmd: /bin/bash /vagrant/tools/setup_mongo_ldap.sh nihalainen "{{db_password}}" "{{samba_ip}}" yes "verysecretpassword1^"
    creates: /etc/sasl2/mongodb.conf

- name: Start database with systemd
  when:  start_db == '1' and (db_systemd_service != '' or (soft != '' and os[dist][soft].systemd_service)  )
  shell:
    cmd: systemctl stop mongod; systemctl restart "{{ os[dist][soft].systemd_service if soft else db_systemd_service }}"

- name: Init or join Mongo replicaset
  when: db_password != '' and (psmdb_version != '' or mongo_org_version != '') and mongo_replicaset != ''
  block:
    - name: init replicaset
      when: master_ip == ''
      command:
        cmd: /bin/bash /vagrant/tools/setup_mongo_replication.sh "{{mongo_replicaset}}" "dba" "{{db_password}}"
        creates: /root/{{mongo_replicaset}}.init
    - name: Add secondary to set
      when: master_ip != ''
      command:
        cmd: /bin/bash /vagrant/tools/setup_mongo_replication.sh "{{mongo_replicaset}}" "dba" "{{db_password}}" "{{master_ip}}"
        creates: /root/{{mongo_replicaset}}.init

- name: Setup PBM agent
  when: pbm_agent  != '' or (pbm_version != '' and mongo_replicaset != '')
  command:
    cmd: /bin/bash /vagrant/tools/setup_pbm_agent.sh "{{mongo_replicaset}}" "{{pbm_s3}}"

- name: Setup pmm-2 client mongo
  when: pmm_client_version.startswith('2.') and pmm_url != '' and psmdb_version != ''
  register: pmm_admin_mongo_config
  changed_when: "'already exists' not in pmm_admin_mongo_config.stdout"
  shell:
    cmd: >-
      pmm-admin add mongodb
      --username=dba
      --password="{{db_password}}"
      {{ '--replication-set='+mongo_replicaset if mongo_replicaset != '' else ''}}
      {{ '--cluster='+cluster_name if cluster_name != '' else ''}}

