# Change configuration in files and dynamically with commands
- name: Create MySQL Database
  when: >
    (
    percona_server_version != '' or
    percona_xtradb_cluster_version != '' or
    mysql_version != '' or
    mysql_ndb_sql_version != ''
    ) and db_password != '' and
    ('garbd' not in db_features.split(','))
  command:
    cmd: /bin/bash /vagrant/tools/create_mysql_db_with_password.sh "{{ db_password }}" "{{ 'oldgrant' if percona_server_version.startswith('5.6') or percona_xtradb_cluster_version.startswith('5.6') or mysql_version.startswith('5.6') else 'no' }}" "{{ package_info['systemd_service'] if package_info else os[dist][soft].systemd_service if soft else db_systemd_service }}"
    creates: /root/.my.cnf

- name: enable wsrep provider
  when: percona_xtradb_cluster_version.startswith('5.6') and (dist == 'stretch' or dist == 'bionic')
  copy:
    dest: /etc/mysql/my.cnf
    content: |
      [mysqld]
      log_bin
      binlog_format                  = ROW
      innodb_buffer_pool_size        = 100M
      innodb_flush_log_at_trx_commit = 0
      innodb_flush_method            = O_DIRECT
      innodb_log_files_in_group      = 2
      innodb_log_file_size           = 20M
      innodb_file_per_table          = 1
      datadir                        = /var/lib/mysql
      wsrep_cluster_address          = gcomm://
      wsrep_provider=/usr/lib/libgalera_smm.so
      wsrep_slave_threads            = 8
      wsrep_cluster_name             = Cluster
      wsrep_node_name                = Node1
      innodb_autoinc_lock_mode       = 2

- name: Apply database options from file
  when: (percona_server_version != '' or percona_xtradb_cluster_version != '' or mysql_version != '') and db_opts_file != ''
  command:
    cmd: >-
      /bin/bash /vagrant/tools/apply_mysql_conf.sh
      "{{ package_info['cnf_file'] if package_info else os[dist][soft].cnf_file }}"
      "/vagrant/configs/{{ db_opts_file }}"
      "{{cluster_name}}"
      "{{db_user}}"
      "{{db_password}}"
    creates: "/root/{{ db_opts_file | basename }}.applied"

- name: Create grastate.dat (Ubuntu/Debian)
  when: (percona_xtradb_cluster_version != '') and (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  command:
    cmd: /bin/bash /vagrant/tools/create_grastate_dat.sh
    creates: /var/lib/mysql/grastate.dat

- name: Boostrap MySQL Router
  when: mysql_router_version != '' and master_ip != ''
  shell:
    cmd: >-
      until mysql -h "{{ master_ip }}" -u "{{ db_user }}" -p"{{ db_password }}" --connect-timeout=30 --wait -e "select 'ONLINE' from mysql_innodb_cluster_metadata.v2_this_instance;" 2>/dev/null |grep -q ONLINE ; do sleep 5 ; done && until mysql -h "{{ master_ip }}" -u "{{ db_user }}" -p"{{ db_password }}" --connect-timeout=30 --wait -e "select * from performance_schema.replication_group_members;" 2>/dev/null |grep -q ONLINE ; do sleep 5 ; done ;mysqlrouter --bootstrap "{{ db_user }}:{{ db_password | urlencode() }}@{{ master_ip }}:3306" --directory /etc/mysqlrouter --user mysqlrouter

- name: Setup Vault keyring plugin for Percona Server
  when: percona_server_version != '' and vault_url != ''
  command:
    cmd: /bin/bash /vagrant/tools/setup_ps_vault.sh "{{vault_url}}" "{{ os[dist][soft].cnf_file }}"
    creates: /var/lib/mysql/keyring_vault.conf

- name: Setup Orchestrator
  when: orchestrator_version != '' or percona_orchestrator_version != ''
  shell:
    warn: false
    cmd: >-
      sed -e 's/MySQLTopologyUser":.*/MySQLTopologyUser": "{{ db_user }}",/'
      -e 's/MySQLTopologyPassword":.*/MySQLTopologyPassword": "{{ db_password }}",/'
      /usr/local/orchestrator/orchestrator-sample-sqlite.conf.json > /usr/local/orchestrator/orchestrator.conf.json

- name: Setup NDB management node
  when: mysql_ndb_management_version != ''
  command:
    cmd: /bin/bash /vagrant/tools/setup_ndb_management.sh "{{ mysql_ndb_management_nodes }}" "{{ mysql_ndb_data_nodes }}" "{{ mysql_ndb_sql_nodes }}"
    creates: /var/lib/mysql-cluster/config.ini
- name: Setup NDB data node
  when: mysql_ndb_data_version != ''
  command:
    cmd: /bin/bash /vagrant/tools/setup_ndb_data.sh "{{ mysql_ndb_management_nodes }}"
    creates: /root/ndb.data.configured
- name: Setup NDB sql node
  when: mysql_ndb_sql_version != ''
  command:
    cmd: /bin/bash /vagrant/tools/setup_ndb_sql.sh "{{ mysql_ndb_management_nodes }}" "{{ os[dist][soft].cnf_file }}"
    creates: /root/ndb.sql.configured

- name: Start database with systemd
  when: >
    start_db == '1' and
    (package_info or db_systemd_service != '' or (soft != '' and 'systemd_service' in os[dist][soft] and os[dist][soft].systemd_service)  ) and
    ('garbd' not in db_features.split(','))
  command:
    cmd: systemctl start "{{ package_info['systemd_service'] if package_info else os[dist][soft].systemd_service if soft else db_systemd_service }}"

- name: Sample databases
  when: sample_db != ''
  block:
    - name: Install World database
      when: ('world' in sample_db.split(','))
      shell:
        cmd: /bin/bash -e /vagrant/tools/load_sample_db.sh world
    - name: Install employees database
      when: ('employees' in sample_db.split(','))
      shell:
        cmd: /bin/bash -e /vagrant/tools/load_sample_db.sh employees
    - name: Install sakila database
      when: ('sakila' in sample_db.split(','))
      shell:
        cmd: /bin/bash -e /vagrant/tools/load_sample_db.sh sakila

- name: Create group replication cluster on a first node
  when: replication_type == 'group' and master_ip == ''
  setup_group_replication:
    state: init
    cluster_name: "{{cluster_name}}"
    user: "{{db_user}}"
    password: "{{db_password}}"


- name: Setup and start replication
  when: >
    master_ip != '' and
    (percona_server_version != '' or ( percona_xtradb_cluster_version != '' and replication_type != 'galera' ) or mysql_version != '') and
    ('garbd' not in db_features.split(','))
  shell:
    cmd: /bin/bash /vagrant/tools/setup_mysql_replication.sh "{{ 'gtid' if replication_type == '' else replication_type }}" "{{ master_ip }}" root "{{ db_password }}" "{{soft}}" "{{ package_info['cnf_file '] }}" "{{package_info['systemd_service']}}" "{{'cluster1' if cluster_name == '' else cluster_name}}" "{{channel}}"
    creates: "/root/replication.configured{{channel}}"

- name: Join to Galera cluster
  when: >
    master_ip != '' and percona_xtradb_cluster_version != '' and replication_type == 'galera'
  galera_join:
    cluster_name: "{{'cluster1' if cluster_name == '' else cluster_name}}"
    donor_ip: "{{ master_ip }}"
    systemd_unit: "{{package_info['systemd_service']}}"
    cnf_file: "{{ package_info['cnf_file'] }}"
    state: joined

- name: MySQL LDAP
  when: ldap_server_ip != '' and (percona_server_version != '' or percona_xtradb_cluster_version != '')
  block:
    - name: fill /etc/pam.d/mysqld
      copy:
        dest: /etc/pam.d/mysqld
        content: |
          auth required pam_ldap.so
          account required pam_ldap.so
    - name: setup MySQL LDAP plugins
      shell:
        cmd: /bin/bash /vagrant/tools/setup_ldap_mysql.sh "{{db_user}}" "{{ 'ldap_simple' if ('ldap_simple' in db_features.split(',')) else 'pam' }}" "{{ package_info['cnf_file'] }}" "{{ package_info['systemd_service'] if soft else db_systemd_service }}"
        creates: /root/mysql-ldap.applied

- name: MySQL Samba Active Directory
  when: samba_ip != '' and samba_pass != '' and samba_sid != '' and (percona_server_version != '' or percona_xtradb_cluster_version != '')
  shell:
    cmd: /bin/bash /vagrant/tools/setup_samba_ldap_client.sh "{{samba_ip}}" "{{samba_pass}}" "{{samba_sid}}" "{{ 'mysql' if ('ldap_simple' not in db_features.split(',')) else 'mysql_ldap_simple' }}" "{{ package_info['cnf_file'] }}" "{{ package_info['systemd_service'] if soft else db_systemd_service }}"

- name: MySQL connector java
  when: master_ip != '' and mysql_connector_java_version != ''
  block:
    - name: Create /srv/java directory
      file:
        path: /srv/java
        state: directory
    - name: put example file to /srv/java directory
      template:
        src: "{{playbook_dir}}/configs/connectors/java/ConnectorTest.java.j2"
        dest: /srv/java/ConnectorTest.java
        mode: '0644'

- name: Enable clustercheck
  when: percona_xtradb_cluster_version != '' and ('clustercheck' in db_features.split(','))
  block:
    - name: Create clustercheck default user
      command:
        cmd: mysql -e "create user if not exists clustercheckuser@localhost identified by 'clustercheckpassword!'"
    - name: install xinetd
      package:
        name: xinetd
        state: present
    - name: Create xinetd service
      when: percona_xtradb_cluster_version.startswith('8.0')
      copy:
        src: "{{playbook_dir}}/roles/haproxy/files/mysqlchk"
        dest: /etc/xinetd.d/mysqlchk
    - name: start xinetd
      systemd:
        name: xinetd
        state: restarted
        enabled: True

- name: Enable MySQL Audit plugin
  when: percona_server_version != '' and start_db != '' and ('audit' in db_features.split(','))
  shell:
    cmd: mysql -e "INSTALL PLUGIN audit_log SONAME 'audit_log.so'"

- name: Enable RocksDB
  when: percona_server_version != '' and rocksdb_enabled|bool
  shell:
    cmd: ps-admin --enable-rocksdb -uroot -u{{db_user}} -p{{db_password}}

- name: Setup ProxySQL replication hostgroup
  when: (proxysql_version != '' or percona_proxysql_version != '') and master_ip != '' and replication_type != 'galera' and replication_type != 'group'
  shell:
    cmd: /bin/bash /vagrant/tools/setup_proxysql_repl.sh {{master_ip}} {{db_user}} {{db_password}}

- name: Setup ProxySQL Galera hostgroup
  when: proxysql_version != '' and master_ip != '' and replication_type == 'galera'
  shell:
    cmd: /bin/bash /vagrant/tools/setup_proxysql_galera.sh {{master_ip}} {{db_user}} {{db_password}}

- name: Setup ProxySQL Galera hostgroup (proxysql-admin)
  when: percona_proxysql_version != '' and master_ip != '' and replication_type == 'galera'
  shell:
    cmd: /bin/bash /vagrant/tools/setup_proxysql_pxc.sh {{master_ip}} {{db_user}} {{db_password}}

- name: Setup ProxySQL Group Replication hostgroup
  when: (proxysql_version != '' or percona_proxysql_version != '') and master_ip != '' and replication_type == 'group'
  shell:
    cmd: /bin/bash /vagrant/tools/setup_proxysql_group.sh {{master_ip}} {{db_user}} {{db_password}}

- name: Setup ProxySQL cluster
  when: (proxysql_version != '' or percona_proxysql_version != '') and proxysql_ip != ''
  shell:
    cmd: /bin/bash /vagrant/tools/setup_proxysql_cluster.sh {{proxysql_ip}} radmin radmin {{db_password}}

- name: Discover MySQL in Orchestrator
  when: orchestrator_version != '' or percona_orchestrator_version != ''
  shell:
    cmd: orchestrator-client -c discover -i {{master_ip}}:3306

- name: Setup pmm-2 client mysql
  when: pmm_client_version.startswith('2.') and pmm_url != '' and (percona_server_version != '' or percona_xtradb_cluster_version != '')
  register: pmm_admin_mysql_config
  changed_when: "'already exists' not in pmm_admin_mysql_config.stdout"
  shell:
    cmd: >-
      /usr/bin/pmm-admin add mysql
      --query-source={{ 'perfschema' if 'pmm_perfschema' in db_features.split(',') else 'slowlog' }}
      --username="{{db_user}}"
      --password="{{db_password}}"

- name: Setup pmm-1 client mysql
  when: pmm_client_version.startswith('1.') and pmm_url != '' and (percona_server_version != '' or percona_xtradb_cluster_version != '')
  register: pmm_admin_mysql_config
  changed_when: "'already exists' not in pmm_admin_mysql_config.stdout"
  shell:
    cmd: >-
      pmm-admin add mysql
      --query-source={{ 'perfschema' if 'pmm_perfschema' in db_features.split(',') else 'slowlog' }}
      --user="{{db_user}}"
      --password="{{db_password}}"


- name: Load database from S3
  when: s3sql != ''
  load_sql_from_s3:
    s3_sql: "{{ s3sql }}"
    client: mysql
