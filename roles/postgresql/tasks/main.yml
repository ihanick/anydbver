---
# tasks file for postgresql
- name: "Package info sql"
  ansible.builtin.debug:
    msg: "{{ package_info_sql }}"
- name: "Package info"
  ansible.builtin.debug:
    msg: "{{ package_info }}"

- name: Enable EPEL
  when: >
    (ansible_distribution == 'CentOS' or ansible_distribution == 'Rocky' or ansible_distribution == 'Red Hat Enterprise Linux' or ansible_distribution == 'OracleLinux')
  package:
    name: epel-release
    state: present

- name: Enable CentOS Linux Software Collections
  when: >
    'development' in db_features.split(',') and
    (ansible_distribution == 'CentOS' or ansible_distribution == 'Rocky' or ansible_distribution == 'Red Hat Enterprise Linux' or ansible_distribution == 'OracleLinux')
  package:
    name: centos-release-scl
    state: present


- name: enable Percona Distribution for PostgreSQL
  when: percona_postgresql_version != ''
  command:
    cmd: /usr/bin/percona-release enable "{{package_info['repo_enable_str']}}"
    creates: "{{package_info['repo_file']}}"

- name: Enable local repo.* caching
  include_tasks: common/tasks/repo_cache.yaml

- name: Postgresql repo
  when: postgresql_version != '' and (ansible_distribution == 'CentOS' or ansible_distribution == 'Rocky' or ansible_distribution == 'Red Hat Enterprise Linux' or ansible_distribution == 'OracleLinux')
  yum:
    name: "{{package_info['repo_url']}}"
    state: present
    disable_gpg_check: yes

- name: Add PGDG 9.5 repo
  when: postgresql_version.startswith('9.5') and (ansible_distribution == 'CentOS' or ansible_distribution == 'Rocky' or ansible_distribution == 'Red Hat Enterprise Linux' or ansible_distribution == 'OracleLinux')
  blockinfile:
    dest: /etc/yum.repos.d/pgdg-redhat-all.repo
    block: |
      [pgdg95]
      name=PostgreSQL 9.5 for RHEL/CentOS $releasever - $basearch
      baseurl=https://download.postgresql.org/pub/repos/yum/9.5/redhat/rhel-$releasever-$basearch
      enabled=1
      gpgcheck=0
      gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-PGDG
      repo_gpgcheck = 0

- name: Add PGDG 9.6 repo
  when: postgresql_version.startswith('9.6') and (ansible_distribution == 'CentOS' or ansible_distribution == 'Rocky' or ansible_distribution == 'Red Hat Enterprise Linux' or ansible_distribution == 'OracleLinux')
  blockinfile:
    dest: /etc/yum.repos.d/pgdg-redhat-all.repo
    block: |
      [pgdg96]
      name=PostgreSQL 9.6 for RHEL/CentOS $releasever - $basearch
      baseurl=https://download.postgresql.org/pub/repos/yum/9.6/redhat/rhel-$releasever-$basearch
      enabled=1
      gpgcheck=0
      gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-PGDG
      repo_gpgcheck = 0

- name: Postgresql repo on el8, disable dnf module postgresql
  when: (postgresql_version != '' or percona_postgresql_version != '') and dist == 'el8'
  shell:
    cmd: dnf -qy module disable postgresql ; touch /root/dist-postgresql.disabled
    creates: /root/dist-postgresql.disabled

- name: Install gpg for apt-key
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
  package: name=gpg state=present

- name: Add postgres.org Apt key
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and postgresql_version != ''
  ansible.builtin.apt_key:
    url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
    state: present

- name: Add postgres.org Apt repo (PGDG)
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and postgresql_version != ''
  lineinfile:
    create: yes
    path: /etc/apt/sources.list.d/pgdg.list
    line: "deb https://apt-archive.postgresql.org/pub/repos/apt {{dist}}-pgdg-archive main"
- name: Add postgres.org Apt repo (PGDG)
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and postgresql_version != '' and package_info['repo_file'] != '' and package_info['repo_enable_str'] != ''
  lineinfile:
    create: yes
    path: "{{ package_info['repo_file'] }}"
    line: "{{ package_info['repo_enable_str'] }}"

- name: refresh apt repo
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
  apt:
    update_cache: yes


- name: install Postgres
  when: percona_postgresql_version != '' or postgresql_version != ''
  package:
    name: "{{ item }}"
    state: present
  with_items: "{{package_info['packages'].split('|')}}"

- name: install Percona Distribution for PostgreSQL (deb)
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and percona_postgresql_version != ''
  apt:
    deb: "{{item}}"
    force: yes
  with_items: "{{pkg[dist].install_packages}}"

- name: install Repmgr
  when: repmgr_version != '' and postgresql_version != ''
  package:
    name: "repmgr_{{maj}}"
    state: present

- name: install pg_stat_monitor for Percona Distribution for PostgreSQL
  when: pmm_client_version != '' and (percona_postgresql_version.startswith('11.') or percona_postgresql_version.startswith('12.') or percona_postgresql_version.startswith('13.') )
  package:
    name: "percona-pg-stat-monitor{{ percona_postgresql_major_ver }}"
    state: present

- name: Install Yandex Odyssey
  when: odyssey_version != ''
  block:
    - name: Install tar
      package:
        name: tar
        state: present
    - name: download and install odyssey
      shell:
        warn: false
        cmd: >-
          curl -L -s https://github.com/yandex/odyssey/releases |
          grep -F {{odyssey_version}}|grep linux-amd64|
          sed -e 's,^.*a href=.,https://github.com,' -e 's,. rel=.nofollow.*$,,' |
          xargs -n 1 curl -s -L --output /tmp/odyssey.tar.gz;
          tar -C /usr/bin/ -xzf /tmp/odyssey.tar.gz;
          rm -rf /tmp/odyssey.tar.gz
        creates: /usr/bin/odyssey

- name: Install WAL-G
  when: walg_version != ''
  block:
    - name: Install tar
      package:
        name: tar
        state: present
    - name: download and install wal-g
      shell:
        warn: false
        cmd: >-
          curl -L -s https://github.com/wal-g/wal-g/releases |
          grep -F {{walg_version}}|grep linux-amd64|
          sed -e 's,^.*a href=.,https://github.com,' -e 's,. rel=.nofollow.*$,,' |
          head -n 1 |
          xargs -n 1 curl -s -L --output /tmp/walg.tar.gz;
          tar -C /usr/bin/ -xzf /tmp/walg.tar.gz;
          rm -rf /tmp/walg.tar.gz
        creates: /usr/bin/wal-g

- name: Install PGPool
  when: pgpool_version != ''
  package:
    name: "{{ item }}"
    state: present
  with_items: "{{os[dist].pgpool.install_packages}}"

- name: Install PGBackrest
  when: pgbackrest_version != ''
  package:
    name: "{{'percona-' if percona_postgresql_version != '' else ''}}pgbackrest"
    state: present

- name: Postgres Setup tasks
  when: install_only == ''
  include_tasks: setup.yaml
